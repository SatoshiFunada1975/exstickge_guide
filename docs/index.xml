<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Top on exStickGE Guide</title>
    <link>https://e-trees.github.io/exstickge_guide/</link>
    <description>Recent content in Top on exStickGE Guide</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Oct 2019 19:15:46 +0900</lastBuildDate>
    
	<atom:link href="https://e-trees.github.io/exstickge_guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ボード概要</title>
      <link>https://e-trees.github.io/exstickge_guide/docs/about/board_overview/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://e-trees.github.io/exstickge_guide/docs/about/board_overview/</guid>
      <description>ボード概要 exStickGE - UDP/IPを手軽に利用できるFPGAボード exStickGEは，Artix-7を搭載したギガビットイーサネットポートを持つFPGAボードです．同梱のe7UDP/IP IPコアを使うことで，簡単にネットワーク接続アプリケーション実装できます．拡張コネクタで約80ポートのI/Oを利用できます．標準構成では，HDMIおよびMIPI-CSIポートを搭載したビジョンボードとの組合せで提供されます．
 メイン基板 メイン基板は，FPGAとイーサネットポートを搭載するシンプルな構成です．LEDやスイッチ，PMODポートを搭載しています．DC 5Vを供給して利用します．
 FPGAの裏には，256MBのDDRメモリと拡張コネクタを搭載しています．
 メイン基板搭載部品    　 型番・パラメタ     FPGA XC7A200TSBG484-2   コンフィグROM MT25QL128ABA1ESE-0SIT   ユーザクロック 200MHz   DDRメモリ MT41K128M16JT-125   Ethernet PHY RTL8211E-VB   電源コネタク DF1B-2P-2.5DS(1ピン: 5V, 2ピン: GND)   拡張コネクタ DF40C-100DP-0.4V    ビジョン基板 ビジョン基板は拡張コネクタの先に接続できる画像処理アプリケーション実装向けのボードです．HDMIポートとMIPI CSI-2をそれぞれ2ポートずつ搭載します．また2.54mmピッチ40ピンコネタクを介して，26ポートのGPIOを利用できます．
 参考リンク 製品の詳細は，e-trees.Japanの製品ページ101「exStickGE」もご覧ください．また，製品についての問い合わせは，e-trees.Japanの問い合わせフォームよりご連絡ください．</description>
    </item>
    
    <item>
      <title>インストール</title>
      <link>https://e-trees.github.io/exstickge_guide/docs/setup/installation/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://e-trees.github.io/exstickge_guide/docs/setup/installation/</guid>
      <description>インストール 電源の接続 exStickGEを利用するためには，CN4から5Vの電源を投入する必要があります．CN4のピン配置は次の通りです．
 附属の電源ケーブルを利用する場合は，
   項目 スペック     外径 5.5mm   内径 2.1mm   極性 センタープラス   出力電圧 5V   出力電流 2A以上を推奨    に適合したACアダプタを利用してください．
JTAGアダプタ FPGAのコンフィギュレーションおよびROMへの書き込み時は，CN5にXilinxの書き込みアダプタを接続してください．ピン穴が千鳥になっているため半田付けしなくともピンヘッダを挿入するだけで書き込みができます．
ピン配置は次の通りです．Digilent社のJTAG-HS2プログラミングケーブルを直接利用できます．
 開発ソフトウェア FPGAの開発にはVivadoを利用してください．搭載しているFPGA XC7A200TSBG484-2は無償で利用可能なWebPackで開発できます．
ボード定義ファイル exStickGEのボード定義ファイルを https://github.com/e-trees/board_files からダウンロードして利用できます．利用する場合は，以下のように，ダウンロードしたファイルを解凍しVivadoのボードファイルディレクトリの下にコピーしてください．
$ wget https://github.com/e-trees/board_files/archive/master.zip $ unzip master.zip $ sudo mv board_files-master/board_files/exstickge /tools/Xilinx/Vivado/2020.1/data/boards/board_files/ 制約ファイルのサンプル 以下はVivado用の制約ファイル(XDCファイル)の例です．拡張コネタクタにビジョン基板を接続していることを想定しています．
# # Main board # # SYSY CLK 200MHz set_property -dict {PACKAGE_PIN H4 IOSTANDARD LVDS_25} [get_ports SYS_CLK_P] set_property -dict {PACKAGE_PIN G4 IOSTANDARD LVDS_25} [get_ports SYS_CLK_N] create_clock -period 5.</description>
    </item>
    
    <item>
      <title>exStickGEでLチカ</title>
      <link>https://e-trees.github.io/exstickge_guide/docs/setup/blink_led/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://e-trees.github.io/exstickge_guide/docs/setup/blink_led/</guid>
      <description>exStickGEでLチカ ボードの動作確認のために，exStickGEのLEDをチカチカさせてみましょう．ここでは，サンプルコードをVivadoを使って合成してFPGA用のビットファイルを作成，exStickGEで動かしてみるまでの手順を紹介します．
ソースコード exStickGEのメインボードに搭載されている3つのLEDを順に点灯させる次のようなモジュールでLチカしてみましょう．これを blinkled.v という名前で保存します．
`default_nettype none module blinkled ( input wire SYS_CLK_P, input wire SYS_CLK_N, input wire PUSH_BTN, output wire [2:0] LED ); reg[31:0] counter; wire SYS_CLK; IBUFDS SYS_CLK_BUF(.I(SYS_CLK_P),.IB(SYS_CLK_N),.O(SYS_CLK)); assign LED = counter[26:25] == 2&amp;#39;b01 ? 3&amp;#39;b001 : counter[26:25] == 2&amp;#39;b10 ? 3&amp;#39;b010 : counter[26:25] == 2&amp;#39;b11 ? 3&amp;#39;b100 : 3&amp;#39;b000; always @(posedge SYS_CLK) begin if(PUSH_BTN == 1&amp;#39;b0) begin counter &amp;lt;= 32&amp;#39;d0; end else begin counter &amp;lt;= counter + 32&amp;#39;d1; end end endmodule `default_nettype wire また，ピン配置の制約を以下のように与えます．こちらはexstickge.</description>
    </item>
    
    <item>
      <title>サンプルのビルドと実行</title>
      <link>https://e-trees.github.io/exstickge_guide/docs/setup/build_examples/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://e-trees.github.io/exstickge_guide/docs/setup/build_examples/</guid>
      <description>サンプルのビルドと実行 exStickGEのサンプルはGitHubのe-trees/exstickge_samplesリポジトリで公開されています．各サンプルのビルドは次の通りです．なお，サンプルは，Vivado 2019.1でビルドすることが想定されています．
 リポジトリをクローンする IPコアをedifディレクトリ下にコピー ビルドしたいプロジェクトをスクリプトでビルド 生成したビットファイルをFPGAに書き込み 操作  以下，それぞれの手順の詳細を説明します．
リポジトリのクローン リポジトリを手元にダウンロードしてください．
CUIで，以下のコマンドを実行するか，
$ git clone https://github.com/e-trees/exstickge_samples.git または，GUIのGitクライアントで https://github.com/e-trees/exstickge_samples.git をクローンしてください．
IPコアの配置 IPコアは，リポジトリにアップロードされていません．exStickGEを購入した時のガイドに従って，e7udpip_rgmii_artix7.edifを入手し，exsticge_samples/edif の下にコピーしてください．
なお，対応するedifのmd5値は，e7udpip_rgmii_artix7.edif.md5 の通りです．ビルドや動作がうまくいかない場合には，手元のIPコアのmd5値のご確認の上，お問い合わせよりご連絡ください．
ビルド 各サンプルは，それぞれのビルドスクリプト create_project.tcl でビルドできます．たとえば，受信パケットを折り返して送信するプロジェクト exStickGE_udpip_loopback をビルドする手順は次の通りです．
Linuxの場合 $ source /tools/Xilinx/Vivado/2019.1/settings64.sh $ cd exstickge_samples/exStickGE_udpip_loopback $ vivado -mode batch -source ./create_project.tcl Windowsの場合 スタートメニューから，VivadoのDOSプロントを開き，
$ cd exstickge_samples\exStickGE_udpip_loopback $ vivado -mode batch -source create_project.tcl ビルド結果の確認 ビルド結果は，ログファイルで確認できるほか，生成されるプロジェクトファイル(prj/*.xpr)をVivadoで開いて確認することができます．
ビットファイルの書き込み ビットファイルは，prj/*.runs/impl_1/の下に作成されます．exStickGE_udpip_loopback であれば，prj/exstickge_udpip_loopback.runs/impl_1/top.bitです．VivadoのHardware ManagerでFPGAに書き込んでください．
操作 サンプルの多くはPCとネットワーク接続してアクセスできます．たとえば，exStickGE_udpip_loopbackに対しては，次のようなRubyスクリプトでexStickGEに対してパケットの送受信ができます．
#!/usr/bin/ruby # exStickGEにパケットを送信する require &amp;#34;socket&amp;#34; socket = UDPSocket.</description>
    </item>
    
    <item>
      <title>UDP/IP IPコア概要</title>
      <link>https://e-trees.github.io/exstickge_guide/docs/udpip/udpip_overview/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://e-trees.github.io/exstickge_guide/docs/udpip/udpip_overview/</guid>
      <description>UDP/IP IPコア概要 UDP/IP IPコアはユーザロジックで簡単にUDP/IPパケットを送受信できるe-trees製のIPコアです．コアとユーザロジックは，e-treesでUPLと呼んでいる制御機構付きFIFOのようなインターフェースでデータをやりとりします．コアの詳細は，e7UDP/IP商品ページをご覧ください．
UPLフォーマット e-treesでは，ハードウェアを構成するモジュール群の物理的な接続を
 Reqeust，Ack，Enableの3つの制御信号 Strobe信号(オプション) データバス(8, 32, 64bitなど．データをシリアライズ化して転送)  に限定したUPLと呼ぶインターフェースをIPコアの標準インターフェースに採用しています． UPLを使ってモジュール同士のデータ授受をシリアライズ化したパケットとしてやり取りすることで，モジュール間接続が簡単になります．UPLの詳細は，UPLとはをご覧ください．
受信パケットフォーマット IPコアは，受信したUDP/IPパケットを次のフォーマットでUPLに出力します．
   # 内容     0 送信先IPアドレス(exStickGEのIPアドレス)   1 送信元IPアドレス   2 送信先ポート番号, 送信元ポート番号   3 データバイト数   4〜 データ    送信パケットフォーマット IPコアをからUDP/IPパケットを送信するには，次のフォーマットでUPLにデータを供給します．
   # 内容     0 送信送り元IPアドレス(exStickGEのIPアドレス)   1 送信先IPアドレス   2 送信元ポート番号，送信先ポート番号,   3 データバイト数   4〜 データ    実際のデータ例 次のスクリーンショットは，IPコアが受信したパケットがUPLから出力されている様子をキャプチャしたものです(クリックで拡大)．</description>
    </item>
    
    <item>
      <title>パケットを送受信してみる</title>
      <link>https://e-trees.github.io/exstickge_guide/docs/udpip/sendrecv_packet/</link>
      <pubDate>Wed, 30 Oct 2019 19:15:46 +0900</pubDate>
      
      <guid>https://e-trees.github.io/exstickge_guide/docs/udpip/sendrecv_packet/</guid>
      <description>パケットを送受信してみる e7UDP/IP IPコアを使ったパケット送受信方法を説明します．
ループバック exStickGEで受信したパケットをそのまま送信するループバックしてみます．これは単に，IPコアの出力UPLを入力UPLに接続するだけで実現できます．
ソースコードは，exstickge_samples/exStickGE_udpip_loopback/sources/top.v をご覧ください．
assign pUdp0Send_Data = pUdp0Receive_Data; assign pUdp0Send_Request = pUdp0Receive_Request; assign pUdp0Receive_Ack = pUdp0Send_Ack; assign pUdp0Send_Enable = pUdp0Receive_Enable; assign pUdp1Send_Data = pUdp1Receive_Data; assign pUdp1Send_Request = pUdp1Receive_Request; assign pUdp1Receive_Ack = pUdp1Send_Ack; assign pUdp1Send_Enable = pUdp1Receive_Enable; の部分がループバックに相当します．
UDP/IPパケットを送信する UDP/IPパケットを送信するには，UDP/IP IPコア概要で紹介した，次のフォーマットに従ったデータ列をUPLから入力します．
   # 内容     0 送信送り元IPアドレス(exStickGEのIPアドレス)   1 送信先IPアドレス   2 送信元ポート番号，送信先ポート番号,   3 データバイト数   4〜 データ    適当なステートマシンで，UPLフォーマットに従ったデータ列を生成することで任意のUDPパケットをexStickGEから送出できます．</description>
    </item>
    
  </channel>
</rss>